// Enhanced sitemap generation with better error handling and fallback
// File: scripts/generate-sitemap.js
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

const BASE_URL = 'https://mayorana.ch';

async function generateSitemap() {
  console.log('üó∫Ô∏è  Generating sitemap...');

  // Try to read from JSON file first (generated by generate-blog-data.js)
  const postsPath = path.join(process.cwd(), 'src/data/blog-posts.json');

  let blogSlugs = [];
  let allTags = new Set();

  console.log('Checking for blog posts at:', postsPath);

  if (fs.existsSync(postsPath)) {
    try {
      const postsContent = fs.readFileSync(postsPath, 'utf8');
      const posts = JSON.parse(postsContent);

      blogSlugs = posts.map(post => post.slug);

      // Collect all unique tags
      posts.forEach(post => {
        if (post.tags && Array.isArray(post.tags)) {
          post.tags.forEach(tag => {
            allTags.add(tag.toLowerCase().replace(/\s+/g, '-'));
          });
        }
      });

      console.log(`‚úÖ Found ${blogSlugs.length} blog posts and ${allTags.size} tags from JSON`);
    } catch (error) {
      console.warn('‚ö†Ô∏è  Error reading blog posts JSON:', error.message);
      console.log('üìÅ Falling back to direct file system scan...');

      // Fallback: scan content directories directly
      const result = await scanContentDirectories();
      blogSlugs = result.slugs;
      allTags = result.tags;
    }
  } else {
    console.log('üìÅ Blog posts JSON not found, scanning content directories...');

    // Fallback: scan content directories directly
    const result = await scanContentDirectories();
    blogSlugs = result.slugs;
    allTags = result.tags;
  }

  // Start XML content
  let sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Static pages -->
  <url>
    <loc>${BASE_URL}</loc>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>${BASE_URL}/services</loc>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${BASE_URL}/about</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>
  <url>
    <loc>${BASE_URL}/contact</loc>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>
  <url>
    <loc>${BASE_URL}/blog</loc>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>`;

  // Add all blog posts
  for (const slug of blogSlugs) {
    sitemap += `
  <url>
    <loc>${BASE_URL}/blog/${slug}</loc>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>`;
  }

  // Add tag pages
  for (const tag of allTags) {
    sitemap += `
  <url>
    <loc>${BASE_URL}/blog/tag/${tag}</loc>
    <changefreq>weekly</changefreq>
    <priority>0.6</priority>
  </url>`;
  }

  sitemap += `
</urlset>`;

  console.log(`‚úÖ Generated sitemap with ${5 + blogSlugs.length + allTags.size} URLs`);
  console.log(`   - Static pages: 5`);
  console.log(`   - Blog posts: ${blogSlugs.length}`);
  console.log(`   - Tag pages: ${allTags.size}`);

  return sitemap;
}

// Fallback function to scan content directories directly
async function scanContentDirectories() {
  const contentDirs = [
    path.join(process.cwd(), 'content/blog'),
    path.join(process.cwd(), 'content/queue') // Include queued content
  ];

  const slugs = [];
  const tags = new Set();

  for (const dir of contentDirs) {
    console.log(`Scanning directory: ${dir}`);

    if (!fs.existsSync(dir)) {
      console.log(`‚ö†Ô∏è  Directory not found: ${dir}`);
      continue;
    }

    const files = fs.readdirSync(dir).filter(f => f.endsWith('.md'));
    console.log(`Found ${files.length} markdown files in ${path.basename(dir)}`);

    for (const file of files) {
      const filePath = path.join(dir, file);

      try {
        const fileContents = fs.readFileSync(filePath, 'utf8');
        const { data } = matter(fileContents);

        // Get slug from frontmatter or generate from filename
        const slug = data.slug || file.replace('.md', '');

        // Only add if not already present
        if (!slugs.includes(slug)) {
          slugs.push(slug);
          console.log(`  ‚úÖ Added: ${slug}`);
        }

        // Collect tags
        if (data.tags && Array.isArray(data.tags)) {
          data.tags.forEach(tag => {
            const tagSlug = tag.toLowerCase().replace(/\s+/g, '-');
            tags.add(tagSlug);
          });
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Error processing ${file}:`, error.message);
      }
    }
  }

  console.log(`‚úÖ Direct scan found ${slugs.length} posts and ${tags.size} tags`);
  return { slugs, tags };
}

async function writeSitemap() {
  try {
    const sitemap = await generateSitemap();
    const publicDir = path.join(process.cwd(), 'public');

    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true });
    }

    fs.writeFileSync(path.join(publicDir, 'sitemap.xml'), sitemap);
    console.log('‚úÖ Sitemap generated successfully at public/sitemap.xml');
    return true;
  } catch (error) {
    console.error('‚ùå Error generating sitemap:', error);
    return false;
  }
}

// Run if called directly
if (require.main === module) {
  writeSitemap().catch(console.error);
}

module.exports = { generateSitemap, writeSitemap };
